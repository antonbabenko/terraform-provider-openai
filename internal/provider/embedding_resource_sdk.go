// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package provider

import (
	"github.com/antonbabenko/terraform-provider-openai/v2/internal/sdk/pkg/models/shared"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"math/big"
)

func (r *EmbeddingResourceModel) ToCreateSDKType() *shared.CreateEmbeddingRequest {
	var input shared.Input
	str := new(string)
	if !r.Input.Str.IsUnknown() && !r.Input.Str.IsNull() {
		*str = r.Input.Str.ValueString()
	} else {
		str = nil
	}
	if str != nil {
		input = shared.Input{
			Str: str,
		}
	}
	var arrayOfstr []string = nil
	for _, arrayOfstrItem := range r.Input.ArrayOfstr {
		arrayOfstr = append(arrayOfstr, arrayOfstrItem.ValueString())
	}
	if arrayOfstr != nil {
		input = shared.Input{
			ArrayOfstr: arrayOfstr,
		}
	}
	var arrayOfInteger []int64 = nil
	for _, arrayOfIntegerItem := range r.Input.ArrayOfInteger {
		arrayOfInteger = append(arrayOfInteger, arrayOfIntegerItem.ValueInt64())
	}
	if arrayOfInteger != nil {
		input = shared.Input{
			ArrayOfInteger: arrayOfInteger,
		}
	}
	var arrayOfArrayOfInteger [][]int64 = nil
	for _, arrayOfArrayOfIntegerItem := range r.Input.ArrayOfArrayOfInteger {
		var arrayOfArrayOfIntegerTmp []int64 = nil
		for _, item := range arrayOfArrayOfIntegerItem {
			arrayOfArrayOfIntegerTmp = append(arrayOfArrayOfIntegerTmp, item.ValueInt64())
		}
		arrayOfArrayOfInteger = append(arrayOfArrayOfInteger, arrayOfArrayOfIntegerTmp)
	}
	if arrayOfArrayOfInteger != nil {
		input = shared.Input{
			ArrayOfArrayOfInteger: arrayOfArrayOfInteger,
		}
	}
	model := shared.CreateEmbeddingRequestModel(r.Model.ValueString())
	user := new(string)
	if !r.User.IsUnknown() && !r.User.IsNull() {
		*user = r.User.ValueString()
	} else {
		user = nil
	}
	out := shared.CreateEmbeddingRequest{
		Input: input,
		Model: model,
		User:  user,
	}
	return &out
}

func (r *EmbeddingResourceModel) RefreshFromCreateResponse(resp *shared.CreateEmbeddingResponse) {
	if len(r.Data) > len(resp.Data) {
		r.Data = r.Data[:len(resp.Data)]
	}
	for dataCount, dataItem := range resp.Data {
		var data1 Data
		data1.Embedding = nil
		for _, v := range dataItem.Embedding {
			data1.Embedding = append(data1.Embedding, types.NumberValue(big.NewFloat(float64(v))))
		}
		data1.Index = types.Int64Value(dataItem.Index)
		data1.Object = types.StringValue(dataItem.Object)
		if dataCount+1 > len(r.Data) {
			r.Data = append(r.Data, data1)
		} else {
			r.Data[dataCount].Embedding = data1.Embedding
			r.Data[dataCount].Index = data1.Index
			r.Data[dataCount].Object = data1.Object
		}
	}
	r.Object = types.StringValue(resp.Object)
	r.Usage.PromptTokens = types.Int64Value(resp.Usage.PromptTokens)
	r.Usage.TotalTokens = types.Int64Value(resp.Usage.TotalTokens)
}
