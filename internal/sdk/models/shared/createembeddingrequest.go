// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"errors"
	"fmt"
	"github.com/antonbabenko/terraform-provider-openai/v2/internal/sdk/internal/utils"
)

type InputType string

const (
	InputTypeStr                   InputType = "str"
	InputTypeArrayOfStr            InputType = "arrayOfStr"
	InputTypeArrayOfInteger        InputType = "arrayOfInteger"
	InputTypeArrayOfArrayOfInteger InputType = "arrayOfArrayOfInteger"
)

// Input text to embed, encoded as a string or array of tokens. To embed multiple inputs in a single request, pass an array of strings or array of token arrays. Each input must not exceed the max input tokens for the model (8191 tokens for `text-embedding-ada-002`). [Example Python code](https://github.com/openai/openai-cookbook/blob/main/examples/How_to_count_tokens_with_tiktoken.ipynb) for counting tokens.
type Input struct {
	Str                   *string
	ArrayOfStr            []string
	ArrayOfInteger        []int64
	ArrayOfArrayOfInteger [][]int64

	Type InputType
}

func CreateInputStr(str string) Input {
	typ := InputTypeStr

	return Input{
		Str:  &str,
		Type: typ,
	}
}

func CreateInputArrayOfStr(arrayOfStr []string) Input {
	typ := InputTypeArrayOfStr

	return Input{
		ArrayOfStr: arrayOfStr,
		Type:       typ,
	}
}

func CreateInputArrayOfInteger(arrayOfInteger []int64) Input {
	typ := InputTypeArrayOfInteger

	return Input{
		ArrayOfInteger: arrayOfInteger,
		Type:           typ,
	}
}

func CreateInputArrayOfArrayOfInteger(arrayOfArrayOfInteger [][]int64) Input {
	typ := InputTypeArrayOfArrayOfInteger

	return Input{
		ArrayOfArrayOfInteger: arrayOfArrayOfInteger,
		Type:                  typ,
	}
}

func (u *Input) UnmarshalJSON(data []byte) error {

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = InputTypeStr
		return nil
	}

	var arrayOfStr []string = []string{}
	if err := utils.UnmarshalJSON(data, &arrayOfStr, "", true, true); err == nil {
		u.ArrayOfStr = arrayOfStr
		u.Type = InputTypeArrayOfStr
		return nil
	}

	var arrayOfInteger []int64 = []int64{}
	if err := utils.UnmarshalJSON(data, &arrayOfInteger, "", true, true); err == nil {
		u.ArrayOfInteger = arrayOfInteger
		u.Type = InputTypeArrayOfInteger
		return nil
	}

	var arrayOfArrayOfInteger [][]int64 = [][]int64{}
	if err := utils.UnmarshalJSON(data, &arrayOfArrayOfInteger, "", true, true); err == nil {
		u.ArrayOfArrayOfInteger = arrayOfArrayOfInteger
		u.Type = InputTypeArrayOfArrayOfInteger
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for Input", string(data))
}

func (u Input) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.ArrayOfStr != nil {
		return utils.MarshalJSON(u.ArrayOfStr, "", true)
	}

	if u.ArrayOfInteger != nil {
		return utils.MarshalJSON(u.ArrayOfInteger, "", true)
	}

	if u.ArrayOfArrayOfInteger != nil {
		return utils.MarshalJSON(u.ArrayOfArrayOfInteger, "", true)
	}

	return nil, errors.New("could not marshal union type Input: all fields are null")
}

// CreateEmbeddingRequestModel - ID of the model to use. You can use the [List models](/docs/api-reference/models/list) API to see all of your available models, or see our [Model overview](/docs/models/overview) for descriptions of them.
type CreateEmbeddingRequestModel string

const (
	CreateEmbeddingRequestModelTextEmbeddingAda002 CreateEmbeddingRequestModel = "text-embedding-ada-002"
)

func (e CreateEmbeddingRequestModel) ToPointer() *CreateEmbeddingRequestModel {
	return &e
}
func (e *CreateEmbeddingRequestModel) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "text-embedding-ada-002":
		*e = CreateEmbeddingRequestModel(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateEmbeddingRequestModel: %v", v)
	}
}

type CreateEmbeddingRequest struct {
	// Input text to embed, encoded as a string or array of tokens. To embed multiple inputs in a single request, pass an array of strings or array of token arrays. Each input must not exceed the max input tokens for the model (8191 tokens for `text-embedding-ada-002`). [Example Python code](https://github.com/openai/openai-cookbook/blob/main/examples/How_to_count_tokens_with_tiktoken.ipynb) for counting tokens.
	//
	Input Input `json:"input"`
	// ID of the model to use. You can use the [List models](/docs/api-reference/models/list) API to see all of your available models, or see our [Model overview](/docs/models/overview) for descriptions of them.
	//
	Model CreateEmbeddingRequestModel `json:"model"`
	// A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices/end-user-ids).
	//
	User *string `json:"user,omitempty"`
}

func (o *CreateEmbeddingRequest) GetInput() Input {
	if o == nil {
		return Input{}
	}
	return o.Input
}

func (o *CreateEmbeddingRequest) GetModel() CreateEmbeddingRequestModel {
	if o == nil {
		return CreateEmbeddingRequestModel("")
	}
	return o.Model
}

func (o *CreateEmbeddingRequest) GetUser() *string {
	if o == nil {
		return nil
	}
	return o.User
}
