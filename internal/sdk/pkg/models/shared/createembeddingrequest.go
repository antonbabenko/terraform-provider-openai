// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"errors"
	"fmt"
	"openai/v2/internal/sdk/pkg/utils"
)

type InputType string

const (
	InputTypeStr                   InputType = "str"
	InputTypeArrayOfstr            InputType = "arrayOfstr"
	InputTypeArrayOfinteger        InputType = "arrayOfinteger"
	InputTypeArrayOfarrayOfinteger InputType = "arrayOfarrayOfinteger"
)

type Input struct {
	Str                   *string
	ArrayOfstr            []string
	ArrayOfinteger        []int64
	ArrayOfarrayOfinteger [][]int64

	Type InputType
}

func CreateInputStr(str string) Input {
	typ := InputTypeStr

	return Input{
		Str:  &str,
		Type: typ,
	}
}

func CreateInputArrayOfstr(arrayOfstr []string) Input {
	typ := InputTypeArrayOfstr

	return Input{
		ArrayOfstr: arrayOfstr,
		Type:       typ,
	}
}

func CreateInputArrayOfinteger(arrayOfinteger []int64) Input {
	typ := InputTypeArrayOfinteger

	return Input{
		ArrayOfinteger: arrayOfinteger,
		Type:           typ,
	}
}

func CreateInputArrayOfarrayOfinteger(arrayOfarrayOfinteger [][]int64) Input {
	typ := InputTypeArrayOfarrayOfinteger

	return Input{
		ArrayOfarrayOfinteger: arrayOfarrayOfinteger,
		Type:                  typ,
	}
}

func (u *Input) UnmarshalJSON(data []byte) error {

	str := new(string)
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = str
		u.Type = InputTypeStr
		return nil
	}

	arrayOfstr := []string{}
	if err := utils.UnmarshalJSON(data, &arrayOfstr, "", true, true); err == nil {
		u.ArrayOfstr = arrayOfstr
		u.Type = InputTypeArrayOfstr
		return nil
	}

	arrayOfinteger := []int64{}
	if err := utils.UnmarshalJSON(data, &arrayOfinteger, "", true, true); err == nil {
		u.ArrayOfinteger = arrayOfinteger
		u.Type = InputTypeArrayOfinteger
		return nil
	}

	arrayOfarrayOfinteger := [][]int64{}
	if err := utils.UnmarshalJSON(data, &arrayOfarrayOfinteger, "", true, true); err == nil {
		u.ArrayOfarrayOfinteger = arrayOfarrayOfinteger
		u.Type = InputTypeArrayOfarrayOfinteger
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u Input) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.ArrayOfstr != nil {
		return utils.MarshalJSON(u.ArrayOfstr, "", true)
	}

	if u.ArrayOfinteger != nil {
		return utils.MarshalJSON(u.ArrayOfinteger, "", true)
	}

	if u.ArrayOfarrayOfinteger != nil {
		return utils.MarshalJSON(u.ArrayOfarrayOfinteger, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

// CreateEmbeddingRequestModel - ID of the model to use. You can use the [List models](/docs/api-reference/models/list) API to see all of your available models, or see our [Model overview](/docs/models/overview) for descriptions of them.
type CreateEmbeddingRequestModel string

const (
	CreateEmbeddingRequestModelTextEmbeddingAda002 CreateEmbeddingRequestModel = "text-embedding-ada-002"
)

func (e CreateEmbeddingRequestModel) ToPointer() *CreateEmbeddingRequestModel {
	return &e
}

func (e *CreateEmbeddingRequestModel) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "text-embedding-ada-002":
		*e = CreateEmbeddingRequestModel(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateEmbeddingRequestModel: %v", v)
	}
}

type CreateEmbeddingRequest struct {
	// Input text to embed, encoded as a string or array of tokens. To embed multiple inputs in a single request, pass an array of strings or array of token arrays. Each input must not exceed the max input tokens for the model (8191 tokens for `text-embedding-ada-002`). [Example Python code](https://github.com/openai/openai-cookbook/blob/main/examples/How_to_count_tokens_with_tiktoken.ipynb) for counting tokens.
	//
	Input Input `json:"input"`
	// ID of the model to use. You can use the [List models](/docs/api-reference/models/list) API to see all of your available models, or see our [Model overview](/docs/models/overview) for descriptions of them.
	//
	Model CreateEmbeddingRequestModel `json:"model"`
	// A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices/end-user-ids).
	//
	User *string `json:"user,omitempty"`
}

func (o *CreateEmbeddingRequest) GetInput() Input {
	if o == nil {
		return Input{}
	}
	return o.Input
}

func (o *CreateEmbeddingRequest) GetModel() CreateEmbeddingRequestModel {
	if o == nil {
		return CreateEmbeddingRequestModel("")
	}
	return o.Model
}

func (o *CreateEmbeddingRequest) GetUser() *string {
	if o == nil {
		return nil
	}
	return o.User
}
