// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type CreateTranscriptionRequestFile struct {
	Content []byte `multipartForm:"content"`
	File    string `multipartForm:"name=file"`
}

// CreateTranscriptionRequestModel2 - ID of the model to use. Only `whisper-1` is currently available.
type CreateTranscriptionRequestModel2 string

const (
	CreateTranscriptionRequestModel2Whisper1 CreateTranscriptionRequestModel2 = "whisper-1"
)

func (e CreateTranscriptionRequestModel2) ToPointer() *CreateTranscriptionRequestModel2 {
	return &e
}

func (e *CreateTranscriptionRequestModel2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "whisper-1":
		*e = CreateTranscriptionRequestModel2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateTranscriptionRequestModel2: %v", v)
	}
}

// CreateTranscriptionRequestResponseFormat - The format of the transcript output, in one of these options: json, text, srt, verbose_json, or vtt.
type CreateTranscriptionRequestResponseFormat string

const (
	CreateTranscriptionRequestResponseFormatJSON        CreateTranscriptionRequestResponseFormat = "json"
	CreateTranscriptionRequestResponseFormatText        CreateTranscriptionRequestResponseFormat = "text"
	CreateTranscriptionRequestResponseFormatSrt         CreateTranscriptionRequestResponseFormat = "srt"
	CreateTranscriptionRequestResponseFormatVerboseJSON CreateTranscriptionRequestResponseFormat = "verbose_json"
	CreateTranscriptionRequestResponseFormatVtt         CreateTranscriptionRequestResponseFormat = "vtt"
)

func (e CreateTranscriptionRequestResponseFormat) ToPointer() *CreateTranscriptionRequestResponseFormat {
	return &e
}

func (e *CreateTranscriptionRequestResponseFormat) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "json":
		fallthrough
	case "text":
		fallthrough
	case "srt":
		fallthrough
	case "verbose_json":
		fallthrough
	case "vtt":
		*e = CreateTranscriptionRequestResponseFormat(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateTranscriptionRequestResponseFormat: %v", v)
	}
}

type CreateTranscriptionRequest1 struct {
	// The audio file object (not file name) to transcribe, in one of these formats: mp3, mp4, mpeg, mpga, m4a, wav, or webm.
	//
	File CreateTranscriptionRequestFile `multipartForm:"file"`
	// The language of the input audio. Supplying the input language in [ISO-639-1](https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes) format will improve accuracy and latency.
	//
	Language *string `multipartForm:"name=language"`
	// ID of the model to use. Only `whisper-1` is currently available.
	//
	Model interface{} `multipartForm:"name=model,json"`
	// An optional text to guide the model's style or continue a previous audio segment. The [prompt](/docs/guides/speech-to-text/prompting) should match the audio language.
	//
	Prompt *string `multipartForm:"name=prompt"`
	// The format of the transcript output, in one of these options: json, text, srt, verbose_json, or vtt.
	//
	ResponseFormat *CreateTranscriptionRequestResponseFormat `multipartForm:"name=response_format"`
	// The sampling temperature, between 0 and 1. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. If set to 0, the model will use [log probability](https://en.wikipedia.org/wiki/Log_probability) to automatically increase the temperature until certain thresholds are hit.
	//
	Temperature *float64 `multipartForm:"name=temperature"`
}
