// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// CreateEditResponseChoicesFinishReason - The reason the model stopped generating tokens. This will be `stop` if the model hit a natural stop point or a provided stop sequence,
// or `length` if the maximum number of tokens specified in the request was reached.
type CreateEditResponseChoicesFinishReason string

const (
	CreateEditResponseChoicesFinishReasonStop   CreateEditResponseChoicesFinishReason = "stop"
	CreateEditResponseChoicesFinishReasonLength CreateEditResponseChoicesFinishReason = "length"
)

func (e CreateEditResponseChoicesFinishReason) ToPointer() *CreateEditResponseChoicesFinishReason {
	return &e
}

func (e *CreateEditResponseChoicesFinishReason) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "stop":
		fallthrough
	case "length":
		*e = CreateEditResponseChoicesFinishReason(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateEditResponseChoicesFinishReason: %v", v)
	}
}

type CreateEditResponseChoices struct {
	// The reason the model stopped generating tokens. This will be `stop` if the model hit a natural stop point or a provided stop sequence,
	// or `length` if the maximum number of tokens specified in the request was reached.
	//
	FinishReason CreateEditResponseChoicesFinishReason `json:"finish_reason"`
	// The index of the choice in the list of choices.
	Index int64 `json:"index"`
	// The edited result.
	Text string `json:"text"`
}

// CreateEditResponse - OK
type CreateEditResponse struct {
	// A list of edit choices. Can be more than one if `n` is greater than 1.
	Choices []CreateEditResponseChoices `json:"choices"`
	// A unix timestamp of when the edit was created.
	Created int64 `json:"created"`
	// The object type, which is always `edit`.
	Object string `json:"object"`
	// Usage statistics for the completion request.
	Usage CompletionUsage `json:"usage"`
}
