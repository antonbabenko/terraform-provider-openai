// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"bytes"
	"encoding/json"
	"errors"
	"fmt"
)

// CreateChatCompletionRequestFunctionCall2 - Controls how the model responds to function calls. "none" means the model does not call a function, and responds to the end-user. "auto" means the model can pick between an end-user or calling a function.  Specifying a particular function via `{"name":\ "my_function"}` forces the model to call that function. "none" is the default when no functions are present. "auto" is the default if functions are present.
type CreateChatCompletionRequestFunctionCall2 struct {
	// The name of the function to call.
	Name string `json:"name"`
}

// CreateChatCompletionRequestFunctionCall1 - Controls how the model responds to function calls. "none" means the model does not call a function, and responds to the end-user. "auto" means the model can pick between an end-user or calling a function.  Specifying a particular function via `{"name":\ "my_function"}` forces the model to call that function. "none" is the default when no functions are present. "auto" is the default if functions are present.
type CreateChatCompletionRequestFunctionCall1 string

const (
	CreateChatCompletionRequestFunctionCall1None CreateChatCompletionRequestFunctionCall1 = "none"
	CreateChatCompletionRequestFunctionCall1Auto CreateChatCompletionRequestFunctionCall1 = "auto"
)

func (e CreateChatCompletionRequestFunctionCall1) ToPointer() *CreateChatCompletionRequestFunctionCall1 {
	return &e
}

func (e *CreateChatCompletionRequestFunctionCall1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "none":
		fallthrough
	case "auto":
		*e = CreateChatCompletionRequestFunctionCall1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateChatCompletionRequestFunctionCall1: %v", v)
	}
}

type CreateChatCompletionRequestFunctionCallType string

const (
	CreateChatCompletionRequestFunctionCallTypeCreateChatCompletionRequestFunctionCall1 CreateChatCompletionRequestFunctionCallType = "CreateChatCompletionRequest_function_call_1"
	CreateChatCompletionRequestFunctionCallTypeCreateChatCompletionRequestFunctionCall2 CreateChatCompletionRequestFunctionCallType = "CreateChatCompletionRequest_function_call_2"
)

type CreateChatCompletionRequestFunctionCall struct {
	CreateChatCompletionRequestFunctionCall1 *CreateChatCompletionRequestFunctionCall1
	CreateChatCompletionRequestFunctionCall2 *CreateChatCompletionRequestFunctionCall2

	Type CreateChatCompletionRequestFunctionCallType
}

func CreateCreateChatCompletionRequestFunctionCallCreateChatCompletionRequestFunctionCall1(createChatCompletionRequestFunctionCall1 CreateChatCompletionRequestFunctionCall1) CreateChatCompletionRequestFunctionCall {
	typ := CreateChatCompletionRequestFunctionCallTypeCreateChatCompletionRequestFunctionCall1

	return CreateChatCompletionRequestFunctionCall{
		CreateChatCompletionRequestFunctionCall1: &createChatCompletionRequestFunctionCall1,
		Type:                                     typ,
	}
}

func CreateCreateChatCompletionRequestFunctionCallCreateChatCompletionRequestFunctionCall2(createChatCompletionRequestFunctionCall2 CreateChatCompletionRequestFunctionCall2) CreateChatCompletionRequestFunctionCall {
	typ := CreateChatCompletionRequestFunctionCallTypeCreateChatCompletionRequestFunctionCall2

	return CreateChatCompletionRequestFunctionCall{
		CreateChatCompletionRequestFunctionCall2: &createChatCompletionRequestFunctionCall2,
		Type:                                     typ,
	}
}

func (u *CreateChatCompletionRequestFunctionCall) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	createChatCompletionRequestFunctionCall1 := new(CreateChatCompletionRequestFunctionCall1)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&createChatCompletionRequestFunctionCall1); err == nil {
		u.CreateChatCompletionRequestFunctionCall1 = createChatCompletionRequestFunctionCall1
		u.Type = CreateChatCompletionRequestFunctionCallTypeCreateChatCompletionRequestFunctionCall1
		return nil
	}

	createChatCompletionRequestFunctionCall2 := new(CreateChatCompletionRequestFunctionCall2)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&createChatCompletionRequestFunctionCall2); err == nil {
		u.CreateChatCompletionRequestFunctionCall2 = createChatCompletionRequestFunctionCall2
		u.Type = CreateChatCompletionRequestFunctionCallTypeCreateChatCompletionRequestFunctionCall2
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u CreateChatCompletionRequestFunctionCall) MarshalJSON() ([]byte, error) {
	if u.CreateChatCompletionRequestFunctionCall1 != nil {
		return json.Marshal(u.CreateChatCompletionRequestFunctionCall1)
	}

	if u.CreateChatCompletionRequestFunctionCall2 != nil {
		return json.Marshal(u.CreateChatCompletionRequestFunctionCall2)
	}

	return nil, nil
}

// CreateChatCompletionRequestModel - ID of the model to use. See the [model endpoint compatibility](/docs/models/model-endpoint-compatibility) table for details on which models work with the Chat API.
type CreateChatCompletionRequestModel string

const (
	CreateChatCompletionRequestModelGpt4              CreateChatCompletionRequestModel = "gpt-4"
	CreateChatCompletionRequestModelGpt40314          CreateChatCompletionRequestModel = "gpt-4-0314"
	CreateChatCompletionRequestModelGpt40613          CreateChatCompletionRequestModel = "gpt-4-0613"
	CreateChatCompletionRequestModelGpt432k           CreateChatCompletionRequestModel = "gpt-4-32k"
	CreateChatCompletionRequestModelGpt432k0314       CreateChatCompletionRequestModel = "gpt-4-32k-0314"
	CreateChatCompletionRequestModelGpt432k0613       CreateChatCompletionRequestModel = "gpt-4-32k-0613"
	CreateChatCompletionRequestModelGpt35Turbo        CreateChatCompletionRequestModel = "gpt-3.5-turbo"
	CreateChatCompletionRequestModelGpt35Turbo16k     CreateChatCompletionRequestModel = "gpt-3.5-turbo-16k"
	CreateChatCompletionRequestModelGpt35Turbo0301    CreateChatCompletionRequestModel = "gpt-3.5-turbo-0301"
	CreateChatCompletionRequestModelGpt35Turbo0613    CreateChatCompletionRequestModel = "gpt-3.5-turbo-0613"
	CreateChatCompletionRequestModelGpt35Turbo16k0613 CreateChatCompletionRequestModel = "gpt-3.5-turbo-16k-0613"
)

func (e CreateChatCompletionRequestModel) ToPointer() *CreateChatCompletionRequestModel {
	return &e
}

func (e *CreateChatCompletionRequestModel) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "gpt-4":
		fallthrough
	case "gpt-4-0314":
		fallthrough
	case "gpt-4-0613":
		fallthrough
	case "gpt-4-32k":
		fallthrough
	case "gpt-4-32k-0314":
		fallthrough
	case "gpt-4-32k-0613":
		fallthrough
	case "gpt-3.5-turbo":
		fallthrough
	case "gpt-3.5-turbo-16k":
		fallthrough
	case "gpt-3.5-turbo-0301":
		fallthrough
	case "gpt-3.5-turbo-0613":
		fallthrough
	case "gpt-3.5-turbo-16k-0613":
		*e = CreateChatCompletionRequestModel(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateChatCompletionRequestModel: %v", v)
	}
}

type CreateChatCompletionRequestStopType string

const (
	CreateChatCompletionRequestStopTypeStr        CreateChatCompletionRequestStopType = "str"
	CreateChatCompletionRequestStopTypeArrayOfstr CreateChatCompletionRequestStopType = "arrayOfstr"
)

type CreateChatCompletionRequestStop struct {
	Str        *string
	ArrayOfstr []string

	Type CreateChatCompletionRequestStopType
}

func CreateCreateChatCompletionRequestStopStr(str string) CreateChatCompletionRequestStop {
	typ := CreateChatCompletionRequestStopTypeStr

	return CreateChatCompletionRequestStop{
		Str:  &str,
		Type: typ,
	}
}

func CreateCreateChatCompletionRequestStopArrayOfstr(arrayOfstr []string) CreateChatCompletionRequestStop {
	typ := CreateChatCompletionRequestStopTypeArrayOfstr

	return CreateChatCompletionRequestStop{
		ArrayOfstr: arrayOfstr,
		Type:       typ,
	}
}

func (u *CreateChatCompletionRequestStop) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	str := new(string)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&str); err == nil {
		u.Str = str
		u.Type = CreateChatCompletionRequestStopTypeStr
		return nil
	}

	arrayOfstr := []string{}
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&arrayOfstr); err == nil {
		u.ArrayOfstr = arrayOfstr
		u.Type = CreateChatCompletionRequestStopTypeArrayOfstr
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u CreateChatCompletionRequestStop) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return json.Marshal(u.Str)
	}

	if u.ArrayOfstr != nil {
		return json.Marshal(u.ArrayOfstr)
	}

	return nil, nil
}

type CreateChatCompletionRequest struct {
	// Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency in the text so far, decreasing the model's likelihood to repeat the same line verbatim.
	//
	// [See more information about frequency and presence penalties.](/docs/api-reference/parameter-details)
	//
	FrequencyPenalty *float64 `json:"frequency_penalty,omitempty"`
	// Controls how the model responds to function calls. "none" means the model does not call a function, and responds to the end-user. "auto" means the model can pick between an end-user or calling a function.  Specifying a particular function via `{"name":\ "my_function"}` forces the model to call that function. "none" is the default when no functions are present. "auto" is the default if functions are present.
	FunctionCall *CreateChatCompletionRequestFunctionCall `json:"function_call,omitempty"`
	// A list of functions the model may generate JSON inputs for.
	Functions []ChatCompletionFunctions `json:"functions,omitempty"`
	// Modify the likelihood of specified tokens appearing in the completion.
	//
	// Accepts a json object that maps tokens (specified by their token ID in the tokenizer) to an associated bias value from -100 to 100. Mathematically, the bias is added to the logits generated by the model prior to sampling. The exact effect will vary per model, but values between -1 and 1 should decrease or increase likelihood of selection; values like -100 or 100 should result in a ban or exclusive selection of the relevant token.
	//
	LogitBias map[string]int64 `json:"logit_bias,omitempty"`
	// The maximum number of [tokens](/tokenizer) to generate in the chat completion.
	//
	// The total length of input tokens and generated tokens is limited by the model's context length. [Example Python code](https://github.com/openai/openai-cookbook/blob/main/examples/How_to_count_tokens_with_tiktoken.ipynb) for counting tokens.
	//
	MaxTokens *int64 `json:"max_tokens,omitempty"`
	// A list of messages comprising the conversation so far. [Example Python code](https://github.com/openai/openai-cookbook/blob/main/examples/How_to_format_inputs_to_ChatGPT_models.ipynb).
	Messages []ChatCompletionRequestMessage `json:"messages"`
	// ID of the model to use. See the [model endpoint compatibility](/docs/models/model-endpoint-compatibility) table for details on which models work with the Chat API.
	Model CreateChatCompletionRequestModel `json:"model"`
	// How many chat completion choices to generate for each input message.
	N *int64 `json:"n,omitempty"`
	// Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far, increasing the model's likelihood to talk about new topics.
	//
	// [See more information about frequency and presence penalties.](/docs/api-reference/parameter-details)
	//
	PresencePenalty *float64 `json:"presence_penalty,omitempty"`
	// Up to 4 sequences where the API will stop generating further tokens.
	//
	Stop *CreateChatCompletionRequestStop `json:"stop,omitempty"`
	// If set, partial message deltas will be sent, like in ChatGPT. Tokens will be sent as data-only [server-sent events](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#Event_stream_format) as they become available, with the stream terminated by a `data: [DONE]` message. [Example Python code](https://github.com/openai/openai-cookbook/blob/main/examples/How_to_stream_completions.ipynb).
	//
	Stream *bool `json:"stream,omitempty"`
	// What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.
	//
	// We generally recommend altering this or `top_p` but not both.
	//
	Temperature *float64 `json:"temperature,omitempty"`
	// An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered.
	//
	// We generally recommend altering this or `temperature` but not both.
	//
	TopP *float64 `json:"top_p,omitempty"`
	// A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices/end-user-ids).
	//
	User *string `json:"user,omitempty"`
}
