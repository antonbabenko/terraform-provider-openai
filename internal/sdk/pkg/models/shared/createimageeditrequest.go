// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/antonbabenko/terraform-provider-openai/v2/internal/sdk/pkg/utils"
)

type Image struct {
	Content  []byte `multipartForm:"content"`
	FileName string `multipartForm:"name=image"`
}

func (o *Image) GetContent() []byte {
	if o == nil {
		return []byte{}
	}
	return o.Content
}

func (o *Image) GetFileName() string {
	if o == nil {
		return ""
	}
	return o.FileName
}

type Mask struct {
	Content  []byte `multipartForm:"content"`
	FileName string `multipartForm:"name=mask"`
}

func (o *Mask) GetContent() []byte {
	if o == nil {
		return []byte{}
	}
	return o.Content
}

func (o *Mask) GetFileName() string {
	if o == nil {
		return ""
	}
	return o.FileName
}

// ResponseFormat - The format in which the generated images are returned. Must be one of `url` or `b64_json`.
type ResponseFormat string

const (
	ResponseFormatURL     ResponseFormat = "url"
	ResponseFormatB64JSON ResponseFormat = "b64_json"
)

func (e ResponseFormat) ToPointer() *ResponseFormat {
	return &e
}

func (e *ResponseFormat) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "url":
		fallthrough
	case "b64_json":
		*e = ResponseFormat(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ResponseFormat: %v", v)
	}
}

// Size - The size of the generated images. Must be one of `256x256`, `512x512`, or `1024x1024`.
type Size string

const (
	SizeTwoHundredAndFiftySixx256     Size = "256x256"
	SizeFiveHundredAndTwelvex512      Size = "512x512"
	SizeOneThousandAndTwentyFourx1024 Size = "1024x1024"
)

func (e Size) ToPointer() *Size {
	return &e
}

func (e *Size) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "256x256":
		fallthrough
	case "512x512":
		fallthrough
	case "1024x1024":
		*e = Size(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Size: %v", v)
	}
}

type CreateImageEditRequest struct {
	// The image to edit. Must be a valid PNG file, less than 4MB, and square. If mask is not provided, image must have transparency, which will be used as the mask.
	Image Image `multipartForm:"file"`
	// An additional image whose fully transparent areas (e.g. where alpha is zero) indicate where `image` should be edited. Must be a valid PNG file, less than 4MB, and have the same dimensions as `image`.
	Mask *Mask `multipartForm:"file"`
	// The number of images to generate. Must be between 1 and 10.
	N *int64 `default:"1" multipartForm:"name=n"`
	// A text description of the desired image(s). The maximum length is 1000 characters.
	Prompt string `multipartForm:"name=prompt"`
	// The format in which the generated images are returned. Must be one of `url` or `b64_json`.
	ResponseFormat *ResponseFormat `default:"url" multipartForm:"name=response_format"`
	// The size of the generated images. Must be one of `256x256`, `512x512`, or `1024x1024`.
	Size *Size `default:"1024x1024" multipartForm:"name=size"`
	// A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices/end-user-ids).
	//
	User *string `multipartForm:"name=user"`
}

func (c CreateImageEditRequest) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *CreateImageEditRequest) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *CreateImageEditRequest) GetImage() Image {
	if o == nil {
		return Image{}
	}
	return o.Image
}

func (o *CreateImageEditRequest) GetMask() *Mask {
	if o == nil {
		return nil
	}
	return o.Mask
}

func (o *CreateImageEditRequest) GetN() *int64 {
	if o == nil {
		return nil
	}
	return o.N
}

func (o *CreateImageEditRequest) GetPrompt() string {
	if o == nil {
		return ""
	}
	return o.Prompt
}

func (o *CreateImageEditRequest) GetResponseFormat() *ResponseFormat {
	if o == nil {
		return nil
	}
	return o.ResponseFormat
}

func (o *CreateImageEditRequest) GetSize() *Size {
	if o == nil {
		return nil
	}
	return o.Size
}

func (o *CreateImageEditRequest) GetUser() *string {
	if o == nil {
		return nil
	}
	return o.User
}
