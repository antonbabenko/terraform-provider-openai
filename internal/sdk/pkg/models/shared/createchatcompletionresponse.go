// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type FinishReason string

const (
	FinishReasonStop         FinishReason = "stop"
	FinishReasonLength       FinishReason = "length"
	FinishReasonFunctionCall FinishReason = "function_call"
)

func (e FinishReason) ToPointer() *FinishReason {
	return &e
}

func (e *FinishReason) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "stop":
		fallthrough
	case "length":
		fallthrough
	case "function_call":
		*e = FinishReason(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FinishReason: %v", v)
	}
}

type Choices struct {
	FinishReason FinishReason                  `json:"finish_reason"`
	Index        int64                         `json:"index"`
	Message      ChatCompletionResponseMessage `json:"message"`
}

func (o *Choices) GetFinishReason() FinishReason {
	if o == nil {
		return FinishReason("")
	}
	return o.FinishReason
}

func (o *Choices) GetIndex() int64 {
	if o == nil {
		return 0
	}
	return o.Index
}

func (o *Choices) GetMessage() ChatCompletionResponseMessage {
	if o == nil {
		return ChatCompletionResponseMessage{}
	}
	return o.Message
}

type Usage struct {
	CompletionTokens int64 `json:"completion_tokens"`
	PromptTokens     int64 `json:"prompt_tokens"`
	TotalTokens      int64 `json:"total_tokens"`
}

func (o *Usage) GetCompletionTokens() int64 {
	if o == nil {
		return 0
	}
	return o.CompletionTokens
}

func (o *Usage) GetPromptTokens() int64 {
	if o == nil {
		return 0
	}
	return o.PromptTokens
}

func (o *Usage) GetTotalTokens() int64 {
	if o == nil {
		return 0
	}
	return o.TotalTokens
}

type CreateChatCompletionResponse struct {
	Choices []Choices `json:"choices"`
	Created int64     `json:"created"`
	ID      string    `json:"id"`
	Model   string    `json:"model"`
	Object  string    `json:"object"`
	Usage   *Usage    `json:"usage,omitempty"`
}

func (o *CreateChatCompletionResponse) GetChoices() []Choices {
	if o == nil {
		return []Choices{}
	}
	return o.Choices
}

func (o *CreateChatCompletionResponse) GetCreated() int64 {
	if o == nil {
		return 0
	}
	return o.Created
}

func (o *CreateChatCompletionResponse) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *CreateChatCompletionResponse) GetModel() string {
	if o == nil {
		return ""
	}
	return o.Model
}

func (o *CreateChatCompletionResponse) GetObject() string {
	if o == nil {
		return ""
	}
	return o.Object
}

func (o *CreateChatCompletionResponse) GetUsage() *Usage {
	if o == nil {
		return nil
	}
	return o.Usage
}
